{"version":3,"sources":["services/api-services.js","Components/BouncingLoader/BouncingLoader.js","Components/MapComponent/VisualisationModal.js","Components/MapComponent/MapComponentRender.js","App.js","index.js"],"names":["Axios","require","default","API","apiBase","get","url","params","timeout","axios","method","this","_apiBase","create","baseURL","defaults","headers","post","BouncingLoader","className","VisualisationModal","props","open","close","countries","selectedCountry","useState","plotData","setPlotData","height","title","barmode","useResizeHandler","plotLayout","setPlotLayout","plotRef","useRef","useEffect","el","current","copiedLayout","Object","assign","getBoundingClientRect","width","Modal","Header","Content","style","display","alignItems","Select","options","filter","country","map","text","value","key","search","onChange","e","ed","findCountryData","find","obj1","x","y","active","recovered","deaths","cases","name","type","obj2","onCountryChange","ref","id","length","data","layout","config","responsive","modeBarButtonsToRemove","displaylogo","Actions","Button","negative","onClick","customMarker","L","icon","iconUrl","iconSize","iconAnchor","popupAnchor","bounds","LatLngBounds","LatLng","MapComponentRender","center","setCountries","loading","setLoading","setSelectedCountry","visualisationModal","setVisualisationModal","then","res","catch","console","log","Map","zoom","minZoom","maxBounds","maxBoundsViscosity","TileLayer","attribution","noWrap","Marker","position","countryInfo","lat","long","Popup","src","flag","alt","todayCases","toString","replace","todayDeaths","todayRecovered","Date","updated","toLocaleString","primary","evt","event","onVisButtonClick","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9e4e9076.chunk.js","sourcesContent":["const { default: Axios } = require(\"axios\");\n\nconst apiBase = \"https://corona.lmao.ninja/v2\";\n\nclass api {\n  constructor(apiBase) {\n    this._apiBase = apiBase;\n\n    this.axios = Axios.create({\n      baseURL: this._apiBase,\n      timeout: 10000,\n    });\n    this.axios.defaults.headers.post[\"Content-Type\"] = \"application/json\";\n  }\n\n  get apiBase() {\n    return this._apiBase;\n  }\n\n  get = (url, params = {}, timeout) => {\n    return this.axios({\n      method: \"get\",\n      url,\n      params,\n      timeout: timeout ?? this.timeout,\n    });\n  };\n}\n\nconst API = new api(apiBase);\n\nexport { API };\n","import React from \"react\";\n\nimport \"./BouncingLoader.css\";\n\nconst BouncingLoader = () => {\n  return (\n    <div className=\"bouncing-loader\">\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default BouncingLoader;\n","import React, { useState, useRef, useEffect } from \"react\";\nimport { Modal, Button, Select } from \"semantic-ui-react\";\nimport Plot from \"react-plotly.js\";\n\nconst VisualisationModal = (props) => {\n  const { open, close, countries, selectedCountry } = props;\n  const [plotData, setPlotData] = useState([]);\n  const [plotLayout, setPlotLayout] = useState({\n    // width: 700,\n    height: 240,\n    title: \"Comparison\",\n    barmode: \"group\",\n    useResizeHandler: true,\n  });\n\n  const plotRef = useRef(null);\n\n  useEffect(() => {\n    const elRef = plotRef.current;\n    const el = elRef;\n    const copiedLayout = Object.assign({}, plotLayout);\n    copiedLayout[\"width\"] = el.getBoundingClientRect().width;\n    setPlotLayout(copiedLayout);\n  }, [plotData]);\n\n  const onCountryChange = (e, ed) => {\n    const findCountryData = countries.find(\n      (country) => country.country === ed.value\n    );\n    let obj1 = {\n      x: [\"Active Cases\", \"Recovered Cases\", \"Deaths\", \"Total Cases\"],\n      y: [\n        selectedCountry.active,\n        selectedCountry.recovered,\n        selectedCountry.deaths,\n        selectedCountry.cases,\n      ],\n      name: selectedCountry.country,\n      type: \"bar\",\n    };\n    let obj2 = {\n      x: [\"Active Cases\", \"Recovered Cases\", \"Deaths\", \"Total Cases\"],\n      y: [\n        findCountryData.active,\n        findCountryData.recovered,\n        findCountryData.deaths,\n        findCountryData.cases,\n      ],\n      name: findCountryData.country,\n      type: \"bar\",\n    };\n    const data = [obj1, obj2];\n    setPlotData(data);\n  };\n\n  return (\n    <Modal open={open}>\n      <Modal.Header>Country Comparison</Modal.Header>\n      <Modal.Content>\n        <span style={{ display: \"flex\", alignItems: \"center\" }}>\n          <span>Select a Country</span>\n          <Select\n            options={countries\n              .filter((country) => country.country !== selectedCountry.country)\n              .map((country) => {\n                return {\n                  text: country.country,\n                  value: country.country,\n                  key: country.country,\n                };\n              })}\n            search\n            onChange={(e, ed) => {\n              onCountryChange(e, ed);\n            }}\n          />\n        </span>\n        <div ref={plotRef} id=\"graph\" style={{ width: \"100%\" }}>\n          {plotData.length > 0 ? (\n            <Plot\n              data={plotData}\n              layout={plotLayout}\n              config={{\n                responsive: true,\n                modeBarButtonsToRemove: [\n                  \"zoom2d\",\n                  \"pan2d\",\n                  \"select2d\",\n                  \"lasso2d\",\n                  \"zoomIn2d\",\n                  \"zoomOut2d\",\n                  \"autoScale2d\",\n                  \"resetScale2d\",\n                  \"hoverClosestGl2d\",\n                  \"hoverClosestPie\",\n                  \"toggleHover\",\n                  \"resetViews\",\n                  \"sendDataToCloud\",\n                  \"resetViewMapbox\",\n                  \"hoverClosestCartesian\",\n                  \"hoverCompareCartesian\",\n                  \"toggleSpikelines\",\n                ],\n                displaylogo: false,\n              }}\n            />\n          ) : (\n            <></>\n          )}\n        </div>\n      </Modal.Content>\n      <Modal.Actions>\n        <Button negative onClick={close}>\n          Close\n        </Button>\n      </Modal.Actions>\n    </Modal>\n  );\n};\n\nexport default VisualisationModal;\n","import React, { useState, useEffect } from \"react\";\nimport { Map, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport L from \"leaflet\";\n\nimport \"./MapComponentRender.css\";\nimport { API } from \"../../services/api-services\";\nimport BouncingLoader from \"../BouncingLoader/BouncingLoader\";\nimport { Button } from \"semantic-ui-react\";\nimport VisualisationModal from \"./VisualisationModal\";\n\nconst customMarker = new L.icon({\n  iconUrl: \"https://unpkg.com/leaflet@1.5.1/dist/images/marker-icon.png\",\n  iconSize: [25, 41],\n  iconAnchor: [10, 41],\n  popupAnchor: [2, -40],\n});\nconst bounds = new L.LatLngBounds(\n  new L.LatLng(-89.98155760646617, -180),\n  new L.LatLng(89.99346179538875, 180)\n);\n\nconst MapComponentRender = () => {\n  const [center, setCenter] = useState([0.0, 0.0]);\n  const [countries, setCountries] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [selectedCountry, setSelectedCountry] = useState({});\n  const [visualisationModal, setVisualisationModal] = useState(false);\n\n  useEffect(() => {\n    setLoading(true);\n    API.get(\"/countries\")\n      .then((res) => {\n        setCountries(res.data);\n        setLoading(false);\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  }, []);\n\n  const onVisButtonClick = (event, country) => {\n    setSelectedCountry(country);\n    setVisualisationModal(true);\n  };\n\n  const closeModal = () => setVisualisationModal(false);\n\n  return (\n    <div className=\"map-component-wrapper\">\n      {visualisationModal ? (\n        <VisualisationModal\n          open={visualisationModal}\n          close={closeModal}\n          countries={countries}\n          selectedCountry={selectedCountry}\n        />\n      ) : (\n        <></>\n      )}\n      {loading ? (\n        <BouncingLoader />\n      ) : (\n        <Map\n          center={center}\n          zoom={3}\n          className=\"map\"\n          minZoom={2.5}\n          bounds={bounds}\n          maxBounds={bounds}\n          maxBoundsViscosity={0.75}\n        >\n          <TileLayer\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            noWrap\n          />\n          {countries.map((country) => (\n            <Marker\n              position={[country.countryInfo.lat, country.countryInfo.long]}\n              icon={customMarker}\n              key={country.country}\n            >\n              <Popup>\n                <div className=\"popop-container\">\n                  <div className=\"popup-header\">\n                    <span>\n                      <img\n                        src={country.countryInfo.flag}\n                        alt={country.country}\n                      />\n                    </span>\n                    <span className=\"country-name\">{country.country}</span>\n                  </div>\n                  <div className=\"popup-body\">\n                    <p>\n                      <span>\n                        <b>Today's Cases:</b>\n                      </span>\n                      <span>\n                        {country.todayCases\n                          .toString()\n                          .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n                      </span>\n                    </p>\n                    <p>\n                      <span>\n                        <b>Today's Deaths:</b>\n                      </span>\n                      <span>\n                        {country.todayDeaths\n                          .toString()\n                          .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n                      </span>\n                    </p>\n                    <p>\n                      <span>\n                        <b>Today's Recovery:</b>\n                      </span>\n                      <span>\n                        {country.todayRecovered\n                          .toString()\n                          .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n                      </span>\n                    </p>\n                    <p>\n                      <span>\n                        <b>Active:</b>\n                      </span>\n                      <span>\n                        {country.active\n                          .toString()\n                          .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n                      </span>\n                    </p>\n                    <p>\n                      <span>\n                        <b>Recovered:</b>\n                      </span>\n                      <span>\n                        {country.recovered\n                          .toString()\n                          .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n                      </span>\n                    </p>\n                    <p>\n                      <span>\n                        <b>Deaths:</b>\n                      </span>\n                      <span>\n                        {country.deaths\n                          .toString()\n                          .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n                      </span>\n                    </p>\n                    <p>\n                      <span>\n                        <b>Total Cases:</b>\n                      </span>\n                      <span>\n                        {country.cases\n                          .toString()\n                          .replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")}\n                      </span>\n                    </p>\n                    <p>\n                      <span>\n                        <b>Updated At:</b>\n                      </span>\n                      <span>{new Date(country.updated).toLocaleString()}</span>\n                    </p>\n                  </div>\n                  <Button\n                    primary\n                    onClick={(evt) => onVisButtonClick(evt, country)}\n                  >\n                    Compare {country.country} with other countries\n                  </Button>\n                </div>\n              </Popup>\n            </Marker>\n          ))}\n        </Map>\n      )}\n    </div>\n  );\n};\n\nexport default MapComponentRender;\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport { API } from \"./services/api-services\";\n\nimport MapComponent from \"./Components/MapComponent/MapComponentRender\";\n\nfunction App() {\n  return (\n    <>\n      <MapComponent />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import * as serviceWorker from './serviceWorker';\n\nimport \"leaflet/dist/leaflet.css\";\nimport \"semantic-ui-css/semantic.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}