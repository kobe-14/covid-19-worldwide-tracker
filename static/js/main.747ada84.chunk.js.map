{"version":3,"sources":["services/api-services.js","Components/BouncingLoader/BouncingLoader.js","Components/MapComponent/MapComponentRender.js","App.js","index.js"],"names":["Axios","require","default","API","apiBase","get","url","params","timeout","axios","method","this","_apiBase","create","baseURL","defaults","headers","post","BouncingLoader","className","customMarker","L","icon","iconUrl","iconSize","iconAnchor","popupAnchor","MapComponentRender","useState","center","countries","setCountries","loading","setLoading","useEffect","then","res","data","console","log","catch","e","Map","zoom","TileLayer","attribution","noWrap","map","country","Marker","position","countryInfo","lat","long","key","Popup","src","flag","alt","todayCases","todayDeaths","todayRecovered","active","recovered","deaths","cases","Date","updated","toLocaleString","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gTAAiBA,EAAUC,EAAQ,IAA3BC,QA6BFC,EAAM,I,WAxBV,WAAYC,GAAU,IAAD,gCAcrBC,IAAM,SAACC,GAA+B,IAA1BC,EAAyB,uDAAhB,GAAIC,EAAY,uCACnC,OAAO,EAAKC,MAAM,CAChBC,OAAQ,MACRJ,MACAC,SACAC,QAAO,OAAEA,QAAF,IAAEA,IAAW,EAAKA,WAlB3BG,KAAKC,SAAWR,EAEhBO,KAAKF,MAAQT,EAAMa,OAAO,CACxBC,QAASH,KAAKC,SACdJ,QAAS,MAEXG,KAAKF,MAAMM,SAASC,QAAQC,KAAK,gBAAkB,mB,oDAInD,OAAON,KAAKC,a,KAaJ,CA3BI,gC,wDCYDM,G,YAVQ,WACrB,OACE,yBAAKC,UAAU,mBACb,8BACA,8BACA,iCCDAC,EAAe,IAAIC,IAAEC,KAAK,CAC9BC,QAAS,8DACTC,SAAU,CAAC,GAAI,IACfC,WAAY,CAAC,GAAI,IACjBC,YAAa,CAAC,GAAI,MA4GLC,EAzGY,WAAO,IAAD,EACHC,mBAAS,CAAC,QAAS,MADhB,mBACxBC,EADwB,aAEGD,mBAAS,KAFZ,mBAExBE,EAFwB,KAEbC,EAFa,OAGDH,oBAAS,GAHR,mBAGxBI,EAHwB,KAGfC,EAHe,KAiB/B,OAZAC,qBAAU,WACR/B,EAAIE,IAAI,cACL8B,MAAK,SAACC,GACLL,EAAaK,EAAIC,MACjBC,QAAQC,IAAI,aAAcH,EAAIC,MAC9BJ,GAAW,MAEZO,OAAM,SAACC,GACNH,QAAQC,IAAIE,QAEf,IAGD,yBAAKtB,UAAU,yBACZa,EACC,kBAAC,EAAD,MAEA,kBAACU,EAAA,EAAD,CAAKb,OAAQA,EAAQc,KAAM,EAAGxB,UAAU,OACtC,kBAACyB,EAAA,EAAD,CACEC,YAAY,0EACZvC,IAAI,qDACJwC,QAAM,IAEPhB,EAAUiB,KAAI,SAACC,GAAD,OACb,kBAACC,EAAA,EAAD,CACEC,SAAU,CAACF,EAAQG,YAAYC,IAAKJ,EAAQG,YAAYE,MACxD/B,KAAMF,EACNkC,IAAKN,EAAQA,SAEb,kBAACO,EAAA,EAAD,KACE,yBAAKpC,UAAU,mBACb,yBAAKA,UAAU,gBACb,8BACE,yBACEqC,IAAKR,EAAQG,YAAYM,KACzBC,IAAKV,EAAQA,WAGjB,0BAAM7B,UAAU,gBAAgB6B,EAAQA,UAE1C,yBAAK7B,UAAU,cACb,2BACE,8BACE,8CAEF,8BAAO6B,EAAQW,aAEjB,2BACE,8BACE,+CAEF,8BAAOX,EAAQY,cAEjB,2BACE,8BACE,iDAEF,8BAAOZ,EAAQa,iBAEjB,2BACE,8BACE,uCAEF,8BAAOb,EAAQc,SAEjB,2BACE,8BACE,0CAEF,8BAAOd,EAAQe,YAEjB,2BACE,8BACE,uCAEF,8BAAOf,EAAQgB,SAEjB,2BACE,8BACE,4CAEF,8BAAOhB,EAAQiB,QAEjB,2BACE,8BACE,2CAEF,8BAAO,IAAIC,KAAKlB,EAAQmB,SAASC,6BC7FxCC,MARf,WACE,OACE,oCACE,kBAAC,EAAD,Q,MCDNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.747ada84.chunk.js","sourcesContent":["const { default: Axios } = require(\"axios\");\n\nconst apiBase = \"https://corona.lmao.ninja/v2\";\n\nclass api {\n  constructor(apiBase) {\n    this._apiBase = apiBase;\n\n    this.axios = Axios.create({\n      baseURL: this._apiBase,\n      timeout: 10000,\n    });\n    this.axios.defaults.headers.post[\"Content-Type\"] = \"application/json\";\n  }\n\n  get apiBase() {\n    return this._apiBase;\n  }\n\n  get = (url, params = {}, timeout) => {\n    return this.axios({\n      method: \"get\",\n      url,\n      params,\n      timeout: timeout ?? this.timeout,\n    });\n  };\n}\n\nconst API = new api(apiBase);\n\nexport { API };\n","import React from \"react\";\n\nimport \"./BouncingLoader.css\";\n\nconst BouncingLoader = () => {\n  return (\n    <div className=\"bouncing-loader\">\n      <div></div>\n      <div></div>\n      <div></div>\n    </div>\n  );\n};\n\nexport default BouncingLoader;\n","import React, { useState, useEffect } from \"react\";\nimport { Map, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport L from \"leaflet\";\n\nimport \"./MapComponentRender.css\";\nimport { API } from \"../../services/api-services\";\nimport BouncingLoader from \"../BouncingLoader/BouncingLoader\";\n\nconst customMarker = new L.icon({\n  iconUrl: \"https://unpkg.com/leaflet@1.5.1/dist/images/marker-icon.png\",\n  iconSize: [25, 41],\n  iconAnchor: [10, 41],\n  popupAnchor: [2, -40],\n});\n\nconst MapComponentRender = () => {\n  const [center, setCenter] = useState([51.505, -0.09]);\n  const [countries, setCountries] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    API.get(\"/countries\")\n      .then((res) => {\n        setCountries(res.data);\n        console.log(\"res.data: \", res.data);\n        setLoading(false);\n      })\n      .catch((e) => {\n        console.log(e);\n      });\n  }, []);\n\n  return (\n    <div className=\"map-component-wrapper\">\n      {loading ? (\n        <BouncingLoader />\n      ) : (\n        <Map center={center} zoom={2} className=\"map\">\n          <TileLayer\n            attribution='&amp;copy <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n            url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n            noWrap\n          />\n          {countries.map((country) => (\n            <Marker\n              position={[country.countryInfo.lat, country.countryInfo.long]}\n              icon={customMarker}\n              key={country.country}\n            >\n              <Popup>\n                <div className=\"popop-container\">\n                  <div className=\"popup-header\">\n                    <span>\n                      <img\n                        src={country.countryInfo.flag}\n                        alt={country.country}\n                      />\n                    </span>\n                    <span className=\"country-name\">{country.country}</span>\n                  </div>\n                  <div className=\"popup-body\">\n                    <p>\n                      <span>\n                        <b>Today's Cases:</b>\n                      </span>\n                      <span>{country.todayCases}</span>\n                    </p>\n                    <p>\n                      <span>\n                        <b>Today's Deaths:</b>\n                      </span>\n                      <span>{country.todayDeaths}</span>\n                    </p>\n                    <p>\n                      <span>\n                        <b>Today's Recovery:</b>\n                      </span>\n                      <span>{country.todayRecovered}</span>\n                    </p>\n                    <p>\n                      <span>\n                        <b>Active:</b>\n                      </span>\n                      <span>{country.active}</span>\n                    </p>\n                    <p>\n                      <span>\n                        <b>Recovered:</b>\n                      </span>\n                      <span>{country.recovered}</span>\n                    </p>\n                    <p>\n                      <span>\n                        <b>Deaths:</b>\n                      </span>\n                      <span>{country.deaths}</span>\n                    </p>\n                    <p>\n                      <span>\n                        <b>Total Cases:</b>\n                      </span>\n                      <span>{country.cases}</span>\n                    </p>\n                    <p>\n                      <span>\n                        <b>Updated At:</b>\n                      </span>\n                      <span>{new Date(country.updated).toLocaleString()}</span>\n                    </p>\n                  </div>\n                </div>\n              </Popup>\n            </Marker>\n          ))}\n        </Map>\n      )}\n    </div>\n  );\n};\n\nexport default MapComponentRender;\n","import React, { useEffect } from \"react\";\nimport \"./App.css\";\nimport { API } from \"./services/api-services\";\n\nimport MapComponent from \"./Components/MapComponent/MapComponentRender\";\n\nfunction App() {\n  return (\n    <>\n      <MapComponent />\n    </>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n// import * as serviceWorker from './serviceWorker';\n\nimport \"leaflet/dist/leaflet.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}